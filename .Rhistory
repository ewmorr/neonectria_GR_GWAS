gff.dt[
geneID == temp2.match$geneID, #conditional filter to gene ID
sig_SNP_count := sig_SNP_count + 1 #update count
]
lfmm_results.sig$match.type[i] = "nearest"
lfmm_results.sig$geneID[i] = temp2.match$geneID
lfmm_results.sig$distance[i] = temp2.match$dist
}else if(nrow(temp2.match) > 0){ #if there are no matches we will update below
print(nrow(temp2.match))
gff.dt[
geneID == temp2.match$geneID, #conditional filter to gene ID
sig_SNP_count := sig_SNP_count + 1 #update count
]
#lfmm_results.sig$match.type[i] = "nearest.multiple"
#lfmm_results.sig$geneID = temp2.match$geneID
#lfmm_results.sig$distance = temp2.match$dist
}else{
lfmm_results.sig$match.type[i] = "no.match"
lfmm_results.sig$geneID[i] = "no.match"
lfmm_results.sig$distance[i] = 0
}
}#end alternative to within gene
}#end for loop
lfmm_results.sig$match.type %>% unique
lfmm_results.sig$distance %>% abs %>% mean #4125.388
lfmm_results.sig$distance %>% abs %>% median #2609.5
lfmm_results.sig %>% filter(abs(distance) > 0) %>% pull(distance) %>% abs %>% range #326 to 6034
lfmm_results.sig %>% filter(match.type == "in.gene") %>% nrow #1
lfmm_results.sig %>% nrow #1 of 5 in gene
gff.dt %>% filter(sig_SNP_count > 0) #5 genes have SNPs
gff.dt %>% filter(sig_SNP_count > 1) #0 have at least 2 SNPs
lfmm_results.sig
p1 = ggplot(lfmm_results.sig, aes(x = distance)) +
geom_histogram(breaks = seq(-15000, 15000, 250)) +
#geom_histogram(breaks = c(-15000,-12500,-10000,-7500,-5000, -2500, -1000, -500,-250, -5, 5, 250, 500, 1000, 2500, 5000, 7500, 10000, 1250, 1500)) +
theme_bw() +
labs(x = "Gene distance from SNP (bp)", y = "Number SNPs (bin width 250 bp)")
p1
pdf("figures/SNP_distance.grpc2.pdf")
p1
dev.off()
p2 = ggplot(
gff.dt %>% filter(sig_SNP_count > 0),
aes(x = sig_SNP_count)
) +
geom_bar() +
labs(x = "SNPs per gene", y = "No. genes") +
theme_bw()
p2
pdf("figures/LFMM/SNP_distance.grpc2.pdf")
p1
dev.off()
pdf("figures/LFMM/SNP_per_gene.topt.pdf")
p2
dev.off()
ggplot(
gff.dt %>% filter(sig_SNP_count > 0),
aes(x = reorder(geneID, -sig_SNP_count), y = sig_SNP_count)
) +
geom_point() +
labs(x = "Gene", y = "No. SNPs") +
my_gg_theme +
theme(
axis.text.x = element_blank()
)
ggplot(
gff.dt %>% filter(sig_SNP_count > 0),
aes(x = reorder(geneID, -sig_SNP_count), y = sig_SNP_count)
) +
geom_point() +
labs(x = "Gene", y = "No. SNPs") +
theme_bw() +
theme(
axis.text.x = element_blank()
)
##############################
#Write results tables
##############################
write.table(gff.dt %>% filter(sig_SNP_count > 0), "data/LFMM/annotations/grpc2.gene_SNP_hits.txt", col.names = T, row.names = F, sep = "\t", quote = F)
write.table(lfmm_results.sig, "data/LFMM/annotations/grpc2.SNPs.gene_found.nearest_neighbors.txt", col.names = T, row.names = F, sep = "\t", quote = F)
write.table(gff.dt %>% filter(sig_SNP_count > 0) %>% select(geneID), "data/LFMM/annotations/grpc2.geneIDs.nearest_neighbors.txt", col.names = F, row.names = F, sep = "\t", quote = F)
q(save="no")
library(lfmm)
library(dplyr)
library(ggplot2)
library(scales)
source("library/ggplot_theme.txt")
###################
#data
#Read the metadata
source("growth_curves/make_site_metadata.r")
#Read the GR data
d_params = read.csv("data/rTPC/all_fits.params.csv")
d_params = d_params %>% filter(model_name %in% c("sharpeschoolhigh", "boatman"))
d_half_max = read.csv("data/rTPC/sharpeschoolhigh_half_max_temps.csv")
colnames(d_half_max)[c(2,4)] = c("t50low", "t50high")
# information criteria with weights
d_ic = read.csv("data/rTPC/d_ic.bestTwo_fits.fit_stats.csv")
iso_names = unique(d_params$iso_name)
d_params.t = data.frame(
iso_name = vector(mode = "character", length = length(iso_names)),
rmax = vector(mode = "numeric", length = length(iso_names)),
topt = vector(mode = "numeric", length = length(iso_names)),
ctmax.ssh = vector(mode = "numeric", length = length(iso_names)),
ctmax.boat = vector(mode = "numeric", length = length(iso_names)),
ctmax.wt_mean = vector(mode = "numeric", length = length(iso_names)),
breadth = vector(mode = "numeric", length = length(iso_names)),
skewness = vector(mode = "numeric", length = length(iso_names))
)
for(i in 1:length(iso_names)){
d_params.t$iso_name[i] = d_params %>%
filter(model_name == "sharpeschoolhigh" & iso_name == iso_names[i]) %>%
pull(iso_name)
d_params.t$rmax[i] = d_params %>%
filter(model_name == "sharpeschoolhigh" & iso_name == iso_names[i]) %>%
pull(rmax)
d_params.t$topt[i] = d_params %>%
filter(model_name == "sharpeschoolhigh" & iso_name == iso_names[i]) %>%
pull(topt)
d_params.t$ctmax.ssh[i] = d_params %>%
filter(model_name == "sharpeschoolhigh" & iso_name == iso_names[i]) %>%
pull(ctmax)
d_params.t$ctmax.boat[i] = d_params %>%
filter(model_name == "boatman" & iso_name == iso_names[i]) %>%
pull(ctmax)
d_params.t$ctmax.wt_mean[i] = weighted.mean(
d_params %>%
filter(iso_name == iso_names[i]) %>%
pull(ctmax),
d_ic %>%
filter(iso_name == iso_names[i]) %>%
pull(weight)
)
d_params.t$breadth[i] = d_params %>%
filter(model_name == "sharpeschoolhigh" & iso_name == iso_names[i]) %>%
pull(breadth)
d_params.t$skewness[i] = d_params %>%
filter(model_name == "sharpeschoolhigh" & iso_name == iso_names[i]) %>%
pull(skewness)
}
head(d_params.t)
pairs(d_params.t %>% select(starts_with("ctmax")))
d_params.t
d_params.t %>% filter(iso_name == "BART C8 2C 287")
d_params.t %>% filter(iso_name == "BART C8 3N 44")
d_params.t %>% filter(iso_name == "CCM ACEPE 10")
d_params.t %>% filter(ctmax.ssh > 50)
d_params = left_join(d_params.t, d_half_max %>% select(-Topt))
head(d_params)
d_params$breadth50 = d_params$t50high - d_params$t50low
head(d_params)
d_params$Site = sapply(strsplit(d_params$iso_name, " "), "[[", 1)
d_params$Site[d_params$Site == "ADS2"] = "ADS1"
d_params$Site[d_params$Site == "MEN2"] = "MEN1"
d_params$Site[d_params$Site == "MES2"] = "MES1"
d_params$Site[d_params$Site == "ADN2"] = "ADN1"
d_params$Site[d_params$Site == "MM"] = "CCM"
#join the gr stats to metadata
d_params.metadata = left_join(
d_params,
site_metadata,
by = "Site"
)
apply(d_params.metadata, 1, FUN=function(x) all(is.na(x)) ) %>% sum
# join to sample level metadata. Just the species and sequence label
# sample metadata
sample_ID_map = read.table("data/sample_metadata/sample_ID_mapping_all_samples_05052022.txt", header = T, sep = "\t")
colnames(sample_ID_map)[3:5] = c("iso_name", "sequence_id", "spp")
d_params.metadata.sp = left_join(
d_params.metadata,
sample_ID_map %>% select(iso_name, spp, sequence_id) %>% unique,
by = "iso_name"
)
head(d_params.metadata.sp)
sum(complete.cases(d_params.metadata.sp)) == nrow(d_params.metadata.sp)
d_params.metadata.sp.Nf = d_params.metadata.sp %>% filter(spp == "Nf")
rownames(d_params.metadata.sp.Nf) = d_params.metadata.sp.Nf$sequence_id
d_params.metadata.sp.Nf
d_params.metadata.sp.Nf %>% filter(iso_name == "ANF1 10.2")
d_params.metadata.sp.Nf %>% pull(Site) %>% unique()
########################################################################
########################Completed data set up###########################
########################################################################
#PED sample IDs
sample_ids = read.table("data/genotype_dat/FINAL_snp.mac_ge2.biallele.retainNG152.gwas_analyses.sampleIDs", header = F)
sum(rownames(d_params.metadata.sp.Nf) %in% sample_ids$V1) == nrow(d_params.metadata.sp.Nf)
sample_ids.Nf = sample_ids$V1[sample_ids$V1 %in% d_params.metadata.sp.Nf$sequence_id]
length(sample_ids.Nf) == nrow(d_params.metadata.sp.Nf)
# sort
d_params.metadata.sp.Nf.sorted = d_params.metadata.sp.Nf[sample_ids.Nf,]
sum(complete.cases(d_params.metadata.sp.Nf.sorted)) == nrow(d_params.metadata.sp.Nf.sorted)
row_ids = which(sample_ids$V1 %in% d_params.metadata.sp.Nf.sorted$sequence_id)
#The genotype data can simply be read in as a matrix (according the docs)
#OR can try loading LEA and using readLfmm()
Y = as.matrix(read.table("data/genotype_dat/FINAL_snp.mac_ge2.biallele.retainNG152.gwas_analyses.lfmm", header = F))
Y.filtered = Y[row_ids,]
nrow(Y.filtered)
ncol(Y.filtered)
SNP_pos = read.table("data/genotype_dat/FINAL_snp.mac_ge2.biallele.retainNG152.gwas_analyses.recode.map")
nrow(SNP_pos)
SNP_pos = SNP_pos[c(1,4)]
colnames(SNP_pos) = c("scaffold", "position")
###################
###################
###################
#MAC filter
ref_sum = colSums(Y.filtered == 0)
alt_sum = colSums(Y.filtered == 1)
#filter for MAC ge 3
nrow(Y.filtered)
minMAC = 3
sum(ref_sum < minMAC)
# 101504
sum(alt_sum < minMAC)
ncol(Y.filtered)
# 424676
ncol(Y.filtered) - sum(ref_sum < minMAC)
# 269836
which(ref_sum < minMAC)
which(alt_sum < minMAC)# there are none
rm_cols = which(ref_sum < minMAC)
length(rm_cols)#154840
ncol(Y.filtered)
length(rm_cols)/ncol(Y.filtered)
# 0.3646074
ncol(Y.filtered)-length(rm_cols)
# 269836
Y.filteredMAC = Y.filtered[,-rm_cols]
SNP_pos.filteredMAC = SNP_pos[-rm_cols,]
ncol(Y.filteredMAC)
nrow(SNP_pos.filteredMAC)
#filter for greater than 25% missing data
#sum(colSums(Y.filteredMAC == 9)/nrow(Y.filteredMAC) > 0.25)
#rm_cols = which(colSums(Y.filteredMAC == 9)/nrow(Y.filteredMAC) > 0.25)
#Y.filteredNA = Y.filteredMAC[,-rm_cols]
plot(colSums(Y == 9)/nrow(Y))
plot(colSums(Y == 0))
plot(colSums(Y == 1))
###################
###################
###################
Y.filtered = Y.filteredMAC
SNP_pos = SNP_pos.filteredMAC
ncol(Y.filtered)
nrow(SNP_pos)
#
#principal components analysis for K
pc = prcomp(Y.filtered)
plot((pc$sdev^2)/sum(pc$sdev^2), xlab = 'PC', ylab = "% variance explained")
(pc$sdev^2)/sum(pc$sdev^2)
points(4,pc$sdev[7]^2, type = "h", lwd = 3, col = "blue")
str(pc)
plot(pc$x[,2] ~ pc$x[,1])
plot(pc$x[,3] ~ pc$x[,1])
plot(pc$x[,3] ~ pc$x[,2])
plot(pc$x[,4] ~ pc$x[,1])
#Y = Y.filteredNA
d_params.metadata.sp.Nf.sorted$MAT
#variableread.csv2(#variable for test
X = d_params.metadata.sp.Nf.sorted$MAT
#LFMM ridge
#mod.lfmm = lfmm_ridge(Y = Y, X = X, K = 3)
mod.lfmm.mat = lfmm_ridge(Y = Y.filtered, X = X, K = 3)
pv.mat <- lfmm_test(Y = Y.filtered,
X = X,
lfmm = mod.lfmm.mat,
calibrate = "gif")
#Computing genomic inflation factor (GIF) based on calibrated z-scores (http://membres-timc.imag.fr/Olivier.Francois/lfmm/files/LEA_1.html) and Francois et al. 2016
lambda = median(pv.mat$score^2, na.rm = T)/0.456
lambda #1.263475
adj.p.values = pchisq(pv.mat$score^2/lambda, df = 1, lower = FALSE)
hist(adj.p.values)
#Note that these calibrated scores are similar as pv$calibrated.pvalue
hist(pv.mat$calibrated.pvalue)
hist(pv.mat$pvalue)
#Try higher value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.mat$score^2/1.35, df = 1, lower = FALSE)
hist(adj.p.values)
#Try higher value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.mat$score^2/1.25, df = 1, lower = FALSE)
hist(adj.p.values)
#Try lower value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.mat$score^2/1.15, df = 1, lower = FALSE)
hist(adj.p.values)
#Try lower value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.mat$score^2/1.1, df = 1, lower = FALSE)
hist(adj.p.values)
#THIS IS SHOWING THAT THE GIF CALIBRATION IN THE ALGORITHM IS conservative
#However, the lower values have a correct distribution under null model
#Try at GIF = 1.15
adj.p.values = pchisq(pv.mat$score^2/1.2, df = 1, lower = FALSE)
hist(adj.p.values)
nrow(SNP_pos)
nrow(scf_lens)
scf_lens = read.table("data/genotype_dat/scaffold_lengths.csv", sep = ",", header = F)
colnames(scf_lens) = c("scaffold", "length")
#Note that these calibrated scores are similar as pv$calibrated.pvalue
hist(pv.mat$calibrated.pvalue)
hist(pv.mat$pvalue)
#Try higher value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.mat$score^2/1.25, df = 1, lower = FALSE)
hist(adj.p.values)
#Try lower value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.mat$score^2/1.15, df = 1, lower = FALSE)
hist(adj.p.values)
#Try lower value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.mat$score^2/1.1, df = 1, lower = FALSE)
hist(adj.p.values)
#THIS IS SHOWING THAT THE GIF CALIBRATION IN THE ALGORITHM IS conservative
#However, the lower values have a correct distribution under null model
#Try at GIF = 1.15
adj.p.values = pchisq(pv.mat$score^2/1.2, df = 1, lower = FALSE)
hist(adj.p.values)
#THIS IS SHOWING THAT THE GIF CALIBRATION IN THE ALGORITHM IS conservative
#However, the lower values have a correct distribution under null model
#Try at GIF = 1.15
adj.p.values = pchisq(pv.mat$score^2/1.15, df = 1, lower = FALSE)
hist(adj.p.values)
nrow(SNP_pos)
nrow(scf_lens)
#Join with actual positiion and chromosome
pv.mat.with_pos = data.frame(calibrated.p = pv.mat$calibrated.pvalue, effect_size = pv.mat$B, SNP_pos, man.adj.p = adj.p.values) %>% left_join(., scf_lens)
#############################
#Outlier tests
# identify the 95% percentile
my_threshold <- quantile((pv.mat.with_pos)$calibrated.p, 0.025, na.rm = T)
# make an outlier column in the data.frame
pv.mat.with_pos <- pv.mat.with_pos %>% mutate(outlier = ifelse(calibrated.p < my_threshold, "outlier", "background"))
#Number of outliers
pv.mat.with_pos %>% group_by(outlier) %>% tally()
#FDR correction
pv.mat.with_pos = pv.mat.with_pos %>% filter(!is.na(calibrated.p))
pv.mat.with_pos$FDR.p = p.adjust(pv.mat.with_pos$calibrated.p, method = "fdr", n = length(pv.mat.with_pos$calibrated.p))
range(pv.mat.with_pos$FDR.p, na.rm = T)
pv.mat.with_pos <- pv.mat.with_pos %>% mutate(FDR.sig = ifelse(FDR.p < 0.05, "sig", "background"))
pv.mat.with_pos %>% group_by(FDR.sig) %>% tally()
#FDR correction
#This is based on the manual GIF adjustment
pv.mat.with_pos$FDR.p.man = p.adjust(pv.mat.with_pos$man.adj.p, method = "fdr", n = length(pv.mat.with_pos$man.adj.p))
pv.mat.with_pos <- pv.mat.with_pos %>% mutate(FDR.sig.man = ifelse(FDR.p.man < 0.05, "sig", "background"))
pv.mat.with_pos %>% group_by(FDR.sig.man) %>% tally()
#FDR with auto corrected P (algorithm GIF)
p1 = ggplot(
pv.mat.with_pos %>% filter(length > 100000),
aes(x = position/10^6, y = calibrated.p, color = FDR.sig, alpha = FDR.sig)
) +
#facet_wrap(~scaffold) +
facet_grid(. ~ scaffold, scales = "free_x", space='free') +
geom_point(size = 1) +
scale_x_continuous(breaks = c(0, seq(from = 1, to = 6, by = 1)) ) +
scale_y_continuous(
trans  = compose_trans("log10", "reverse"),
labels = label_log()
) +
scale_color_manual(values = c("grey", "black"), guide = "none") +
scale_alpha_manual(values = c(0.5, 1), guide = "none") +
my_gg_theme +
labs(x = "Position (Mbp)", y = expression(paste("-log"[10],"(",italic(P),")"))) +
theme(
strip.text.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p1
p2 = ggplot(
pv.mat.with_pos %>% filter(length > 100000),
aes(x = position/10^6, y = man.adj.p, color = FDR.sig.man, alpha = FDR.sig.man)
) +
facet_grid(. ~ scaffold, scales = "free_x", space='free') +
geom_point(size = 1) +
scale_x_continuous(breaks = c(0, seq(from = 1, to = 6, by = 1)) ) +
scale_y_continuous(
trans  = compose_trans("log10", "reverse"),
labels = label_log()
) +
scale_color_manual(values = c("grey", "black"), guide = "none") +
scale_alpha_manual(values = c(0.5, 1), guide = "none") +
my_gg_theme +
labs(x = "Position (Mbp)", y = expression(paste("-log"[10],"(",italic(P),")"))) +
theme(
strip.text.x = element_blank(),
#axis.text.x = element_text(size = 8)
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p2
png("figures/LFMM/mat.auto_cal.png", width = 1080, height = 240)
p1
dev.off()
png("figures/LFMM/mat.man_cal.png", width = 1080, height = 240)
p2
dev.off()
write.table(pv.grpc2.with_pos, "data/LFMM/mat.lfmm.txt", quote = F, row.names = F, sep = "\t")
write.table(pv.mat.with_pos, "data/LFMM/mat.lfmm.txt", quote = F, row.names = F, sep = "\t")
#variableread.csv2(#variable for test
X = d_params.metadata.sp.Nf.sorted$HDD4.growing
#LFMM ridge
#mod.lfmm = lfmm_ridge(Y = Y, X = X, K = 3)
mod.lfmm.hdd4g = lfmm_ridge(Y = Y.filtered, X = X, K = 3)
#variableread.csv2(#variable for test
X = d_params.metadata.sp.Nf.sorted$HDD4.mean_nongrowing
#LFMM ridge
#mod.lfmm = lfmm_ridge(Y = Y, X = X, K = 3)
mod.lfmm.hdd4g = lfmm_ridge(Y = Y.filtered, X = X, K = 3)
d_params.metadata.sp.Nf.sorted$HDD4.mean_nongrowing
pv.hdd4g <- lfmm_test(Y = Y.filtered,
X = X,
lfmm = mod.lfmm.hdd4g,
calibrate = "gif")
#Computing genomic inflation factor (GIF) based on calibrated z-scores (http://membres-timc.imag.fr/Olivier.Francois/lfmm/files/LEA_1.html) and Francois et al. 2016
lambda = median(pv.hdd4g$score^2, na.rm = T)/0.456
lambda #1.183144
adj.p.values = pchisq(pv.hdd4g$score^2/lambda, df = 1, lower = FALSE)
hist(adj.p.values)
#Note that these calibrated scores are similar as pv$calibrated.pvalue
hist(pv.hdd4g$calibrated.pvalue)
hist(pv.hdd4g$pvalue)
#Try higher value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.hdd4g$score^2/1.25, df = 1, lower = FALSE)
hist(adj.p.values)
#Try higher value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.hdd4g$score^2/1.35, df = 1, lower = FALSE)
hist(adj.p.values)
#Try lower value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.hdd4g$score^2/1.25, df = 1, lower = FALSE)
hist(adj.p.values)
#Try lower value of GIF -- looking for flat distribution with peak near zero
adj.p.values = pchisq(pv.hdd4g$score^2/1.2, df = 1, lower = FALSE)
hist(adj.p.values)
#THIS IS SHOWING THAT THE GIF CALIBRATION IN THE ALGORITHM IS conservative
#However, the lower values have a correct distribution under null model
#Try at GIF = 1.15
adj.p.values = pchisq(pv.hdd4g$score^2/1.25, df = 1, lower = FALSE)
hist(adj.p.values)
nrow(SNP_pos)
nrow(scf_lens)
#Join with actual positiion and chromosome
pv.hdd4g.with_pos = data.frame(calibrated.p = pv.hdd4g$calibrated.pvalue, effect_size = pv.hdd4g$B, SNP_pos, man.adj.p = adj.p.values) %>% left_join(., scf_lens)
#############################
#Outlier tests
# identify the 95% percentile
my_threshold <- quantile((pv.hdd4g.with_pos)$calibrated.p, 0.025, na.rm = T)
# make an outlier column in the data.frame
pv.hdd4g.with_pos <- pv.hdd4g.with_pos %>% mutate(outlier = ifelse(calibrated.p < my_threshold, "outlier", "background"))
#Number of outliers
pv.hdd4g.with_pos %>% group_by(outlier) %>% tally()
#FDR correction
pv.hdd4g.with_pos = pv.hdd4g.with_pos %>% filter(!is.na(calibrated.p))
pv.hdd4g.with_pos$FDR.p = p.adjust(pv.hdd4g.with_pos$calibrated.p, method = "fdr", n = length(pv.hdd4g.with_pos$calibrated.p))
range(pv.hdd4g.with_pos$FDR.p, na.rm = T)
pv.hdd4g.with_pos <- pv.hdd4g.with_pos %>% mutate(FDR.sig = ifelse(FDR.p < 0.05, "sig", "background"))
pv.hdd4g.with_pos %>% group_by(FDR.sig) %>% tally()
#FDR correction
#This is based on the manual GIF adjustment
pv.hdd4g.with_pos$FDR.p.man = p.adjust(pv.hdd4g.with_pos$man.adj.p, method = "fdr", n = length(pv.hdd4g.with_pos$man.adj.p))
pv.hdd4g.with_pos <- pv.hdd4g.with_pos %>% mutate(FDR.sig.man = ifelse(FDR.p.man < 0.05, "sig", "background"))
pv.hdd4g.with_pos %>% group_by(FDR.sig.man) %>% tally()
#FDR with auto corrected P (algorithm GIF)
p1 = ggplot(
pv.hdd4g.with_pos %>% filter(length > 100000),
aes(x = position/10^6, y = calibrated.p, color = FDR.sig, alpha = FDR.sig)
) +
#facet_wrap(~scaffold) +
facet_grid(. ~ scaffold, scales = "free_x", space='free') +
geom_point(size = 1) +
scale_x_continuous(breaks = c(0, seq(from = 1, to = 6, by = 1)) ) +
scale_y_continuous(
trans  = compose_trans("log10", "reverse"),
labels = label_log()
) +
scale_color_manual(values = c("grey", "black"), guide = "none") +
scale_alpha_manual(values = c(0.5, 1), guide = "none") +
my_gg_theme +
labs(x = "Position (Mbp)", y = expression(paste("-log"[10],"(",italic(P),")"))) +
theme(
strip.text.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p1
p2 = ggplot(
pv.hdd4g.with_pos %>% filter(length > 100000),
aes(x = position/10^6, y = man.adj.p, color = FDR.sig.man, alpha = FDR.sig.man)
) +
facet_grid(. ~ scaffold, scales = "free_x", space='free') +
geom_point(size = 1) +
scale_x_continuous(breaks = c(0, seq(from = 1, to = 6, by = 1)) ) +
scale_y_continuous(
trans  = compose_trans("log10", "reverse"),
labels = label_log()
) +
scale_color_manual(values = c("grey", "black"), guide = "none") +
scale_alpha_manual(values = c(0.5, 1), guide = "none") +
my_gg_theme +
labs(x = "Position (Mbp)", y = expression(paste("-log"[10],"(",italic(P),")"))) +
theme(
strip.text.x = element_blank(),
#axis.text.x = element_text(size = 8)
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
p2
png("figures/LFMM/hdd4_growing.auto_cal.png", width = 1080, height = 240)
p1
dev.off()
png("figures/LFMM/hdd4_growing.man_cal.png", width = 1080, height = 240)
p2
dev.off()
write.table(pv.hdd4g.with_pos, "data/LFMM/hdd4_growing.lfmm.txt", quote = F, row.names = F, sep = "\t")
pv.hdd4g.with_pos
q(save="no")
q(save="no")
